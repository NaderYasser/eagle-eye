{"version":3,"sources":["Components/Header/Header.js","Components/Sidebar/Sidebar.js","Components/Container/Stream.js","Components/Container/Container.js","Components/Container/Controllers.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Sidebar","state","list_ids","axios","get","then","r","data","catch","_this2","this","setInterval","getlist","setState","disabled","id","_this3","update","_this4","map","concat","key","onClick","toggleVis","bind","Component","Stream","props","class","src","alt","Container","srcs","Container_Stream","App","Components_Header_Header","Components_Sidebar_Sidebar","Components_Container_Container","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TAWeA,eATC,WACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,uCC6CWC,6MA5CbC,MAAQ,CACNC,SAAW,6EAGX,OAAOC,IAAMC,IAAI,2BAA2BC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,OAAMC,MAAM,iBAAI,iDAEvD,IAAAC,EAAAC,KACjBC,YAAY,WACVF,EAAKG,UAAUP,KAAK,SAAAH,GAClBO,EAAKI,SAAS,WACZ,MAAO,CACLX,WACAY,UAAU,QAIf,uCAEKC,GAAG,IAAAC,EAAAN,KACX,IAAIA,KAAKT,MAAMa,SAAf,CACA,IAAIG,EAAS,SAACH,GACZE,EAAKH,SAAS,WACZ,MAAO,CACLC,eAING,GAAO,GACPd,IAAMC,IAAI,4BAA4BW,EAAG,GAAK,OAAQ,QAAQ,OAAOA,EAAG,IAAIV,KAAK,WAC/EY,GAAO,KACNT,MAAM,WACPS,GAAO,uCAGH,IAAAC,EAAAR,KACN,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,8BACGY,KAAKT,MAAMC,SAASiB,IAAI,SAAAJ,GAAE,OAAKnB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,UAAAqB,OAAYL,EAAG,GAAG,MAAM,QAAxB,KAAAK,OAAmCF,EAAKjB,MAAMa,SAAS,WAAW,IAAOO,IAAKN,EAAG,GAAIO,QAASJ,EAAKK,UAAUC,KAAKN,EAAKH,IAArI,WAAmJA,EAAG,cAvCvKU,aCMRC,SARA,SAACC,GACd,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAW4B,EAAMC,OAClBhC,EAAAC,EAAAC,cAAA,OAAK+B,IAAMF,EAAME,IAAKC,IAAI,aCgCnBC,GCnCYN,uNDMzBxB,MAAQ,CACN+B,KAAM,CACJ,sCACA,sCACA,sCACA,gHAOF,OACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACmC,EAAD,CAASJ,IAAMnB,KAAKT,MAAM+B,KAAK,GAAIJ,MAAQ,WAC3ChC,EAAAC,EAAAC,cAACmC,EAAD,CAAQJ,IAAMnB,KAAKT,MAAM+B,KAAK,GAAKJ,MAAQ,WAC3ChC,EAAAC,EAAAC,cAACmC,EAAD,CAAQJ,IAAMnB,KAAKT,MAAM+B,KAAK,GAAKJ,MAAQ,WAC3ChC,EAAAC,EAAAC,cAACmC,EAAD,CAAQJ,IAAMnB,KAAKT,MAAM+B,KAAK,GAAKJ,MAAQ,oBAnB5BH,cEaVS,mLAXX,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,cANUZ,aCKEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.a888cc5f.chunk.js","sourcesContent":["import React from 'react'\nimport'./Header.css'\n const Header = () => {\n  return (\n    <div className='header'>\n        EAGLE EYE\n    </div>\n  )\n}\n\n\nexport default Header;","import React, { Component } from 'react'\nimport './Sidebar.css';\nimport axios from 'axios';\n\n class Sidebar extends Component{\n  state = {\n    list_ids : []\n  }\n  getlist(){\n    return axios.get('http://0.0.0.0:5000/ids').then(r => r.data).catch(()=>[])\n  }\n  componentDidMount(){\n    setInterval(() => {\n      this.getlist().then(list_ids => {\n        this.setState(()=>{\n          return {\n            list_ids,\n            disabled: false\n          }\n        })\n      })\n    }, 2000);\n  }\n  toggleVis(id){\n    if (this.state.disabled) return\n    var update = (disabled)=>{\n      this.setState(()=>{\n        return {\n          disabled\n        }\n      })\n    }\n    update(true)\n    axios.get('http://0.0.0.0:5000/ids/'+(id[1] ? 'show': 'hide')+'?id='+id[0]).then(()=>{\n      update(false)\n    }).catch(()=>{\n      update(false)\n    })\n  }\n  render(){\n    return (\n      <div className='side-bar'>\n      <h3>List of Trackers</h3>\n        {this.state.list_ids.map(id => (<div className={`person ${id[1]?'red':'green'} ${this.state.disabled?'disabled':''}` } key={id[0]} onClick={this.toggleVis.bind(this,id)}> person {id[0]}</div>))}\n      </div>\n    )\n  }\n}\n\nexport default Sidebar;\n","import React from 'react'\n\n const Stream =(props) => {\n  return (\n    <div className={props.class}>\n        <img src ={props.src} alt='frame' />\n    </div>\n  )\n}\n\nexport default Stream ;","import React, { Component } from 'react'\nimport './Container.css'\nimport Stream from './Stream';\nimport Map from './Map';\nimport Controllers from './Controllers';\n\n\n class Container extends Component {\n  state = {\n    srcs: [\n      'http://0.0.0.0:5000/video_feed?si=0',\n      'http://0.0.0.0:5000/video_feed?si=1',\n      'http://0.0.0.0:5000/video_feed?si=2',\n      'http://0.0.0.0:5000/video_feed?si=3',\n\n    ]\n  };\n\n  // src={{uri: this.state.srcs[0]}} \n  render() {\n    return (\n      <div className='container'>\n        <div className='streams'>\n          <Stream  src ={this.state.srcs[0]} class = 'stream' />\n          <Stream src ={this.state.srcs[1]}  class = 'stream' />\n          <Stream src ={this.state.srcs[2]}  class = 'stream' />\n          <Stream src ={this.state.srcs[3]}  class = 'stream' />\n          {/* <Controllers class='controller' /> */}\n\n        </div>\n        {/* <Map src ={require('../../images/map.jpeg')} class = 'map'/> */}\n      </div>\n    )\n  }\n}\n\n\nexport default Container;\n","import React, { Component } from 'react'\n\n class Controllers extends Component {\n    state = {\n        pause: false\n      };\n\n      \n  render() {\n    const play_pause = (this.state.pasue)?  <button className='play'></button> :  <button className='pause'></button> ;\n\n    return (\n        <div className={this.props.class} onClick={() =>\n            this.setState({\n              pause: !this.state.pause\n            })\n            }>\n            <div>\n               {play_pause}\n\n            </div>\n        </div>\n    )\n  }\n}\n\nexport default Controllers;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport Sidebar from './Components/Sidebar/Sidebar';\nimport Container from './Components/Container/Container';\n\n\nclass App extends Component {\n  render() {\n    return(\n      <div className='App'>\n        <Header />\n        <Sidebar/>\n        <Container />\n      </div>\n      \n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}